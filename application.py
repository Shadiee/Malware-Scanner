from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
import numpy as np
import requests
import hashlib

from vt import vtapi
class Ui_FilelessMalware(QtWidgets.QWidget):
    
    def __init__(self):
        super().__init__()
        
    def setupUi(self, FilelessMalware):
        FilelessMalware.setObjectName("FilelessMalware")
        FilelessMalware.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(FilelessMalware)
        self.centralwidget.setObjectName("centralwidget")
        self.name_label = QtWidgets.QLabel(self.centralwidget)
        self.name_label.setGeometry(QtCore.QRect(230, 30, 301, 20))
        self.name_label.setObjectName("name_label")
        self.btn_browse = QtWidgets.QPushButton(self.centralwidget)
        self.btn_browse.setGeometry(QtCore.QRect(500, 140, 94, 32))
        self.btn_browse.setObjectName("btn_browse")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(37, 90, 721, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.help_label = QtWidgets.QLabel(self.centralwidget)
        self.help_label.setGeometry(QtCore.QRect(170, 60, 451, 20))
        self.help_label.setObjectName("help_label")
        self.txtArea = QtWidgets.QLineEdit(self.centralwidget)
        self.txtArea.setGeometry(QtCore.QRect(160, 140, 301, 32))
        self.txtArea.setObjectName("txtArea")
        self.btn_post = QtWidgets.QPushButton(self.centralwidget)
        self.btn_post.setGeometry(QtCore.QRect(250, 230, 271, 32))
        self.btn_post.setObjectName("btn_post")
        FilelessMalware.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(FilelessMalware)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menuMenu = QtWidgets.QMenu(self.menubar)
        self.menuMenu.setObjectName("menuMenu")
        FilelessMalware.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(FilelessMalware)
        self.statusbar.setObjectName("statusbar")
        FilelessMalware.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(FilelessMalware)
        self.actionOpen.setObjectName("actionOpen")
        self.actionExit = QtWidgets.QAction(FilelessMalware)
        self.actionExit.setObjectName("actionExit")
        self.menuMenu.addAction(self.actionOpen)
        self.menuMenu.addSeparator()
        self.menuMenu.addAction(self.actionExit)
        self.menubar.addAction(self.menuMenu.menuAction())

        self.retranslateUi(FilelessMalware)
        QtCore.QMetaObject.connectSlotsByName(FilelessMalware)

    def retranslateUi(self, FilelessMalware):
        _translate = QtCore.QCoreApplication.translate
        FilelessMalware.setWindowTitle(_translate("FilelessMalware", "FileLess Malware Scanner"))
        self.name_label.setText(_translate("FilelessMalware", "Welcome to the Fileless Malware Scanner"))
        self.btn_browse.setText(_translate("FilelessMalware", "Browse"))
        self.help_label.setText(_translate("FilelessMalware", "Select the dump files and post them to virustotal for scanning"))
        self.btn_post.setText(_translate("FilelessMalware", "Post"))
        self.btn_browse.clicked.connect(self.browse)
        self.btn_browse.clicked.connect(self.post)
        self.menuMenu.setTitle(_translate("FilelessMalware", "Menu"))
        self.actionOpen.setText(_translate("FilelessMalware", "Open"))
        #self.actionOpen.clicked.connect(self.browse)
		#self.actionOpen.triggered.connect(self.browse)
        self.actionExit.setText(_translate("FilelessMalware", "Exit"))
        self.actionOpen.triggered.connect(self.browse)
        
    def browse(self):
        
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        self.fileName, _ = QtWidgets.QFileDialog.getOpenFileName(self,"Select the csv files ", "","All Files (*);;csv files (*.csv)", options=options)
        str(self.fileName)
        if self.fileName:
            self.txtArea.setText(self.fileName)


            #vt = virustotal.VirusTotal()
            #vt.send_files(fileName)
            #vt.retrieve_files_reports(fileName)


    def post(self):
        filename = self.fileName
        df = pd.read_csv(filename)
        print(df)



        # vt = virustotal.VirusTotal()
        # fileName = self.fileName
        # vt.send_files(fileName)
        # vt.retrieve_files_reports(fileName)

        # print("The file is submitted")

        """url = 'https://www.virustotal.com/vtapi/v2/file/scan'

        params = {'apikey': 'be2d9bee830d2670870806415d6a7ab2f3dcbddd529e15e003d405b192af86f9'}

        files = {'file': (fileName, open(fileName, 'rb'))}

        response = requests.post(url, files=files, params=params)

        print(response.json())
        """

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    FilelessMalware = QtWidgets.QMainWindow()
    ui = Ui_FilelessMalware()
    ui.setupUi(FilelessMalware)
    FilelessMalware.show()
    sys.exit(app.exec_())
